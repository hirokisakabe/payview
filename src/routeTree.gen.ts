/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as FileNameRouteImport } from './routes/$fileName'
import { Route as IndexRouteImport } from './routes/index'
import { Route as FileNamePaymentsRouteImport } from './routes/$fileName.payments'
import { Route as FileNameBreakdownRouteImport } from './routes/$fileName.breakdown'

const FileNameRoute = FileNameRouteImport.update({
  id: '/$fileName',
  path: '/$fileName',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const FileNamePaymentsRoute = FileNamePaymentsRouteImport.update({
  id: '/payments',
  path: '/payments',
  getParentRoute: () => FileNameRoute,
} as any)
const FileNameBreakdownRoute = FileNameBreakdownRouteImport.update({
  id: '/breakdown',
  path: '/breakdown',
  getParentRoute: () => FileNameRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$fileName': typeof FileNameRouteWithChildren
  '/$fileName/breakdown': typeof FileNameBreakdownRoute
  '/$fileName/payments': typeof FileNamePaymentsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$fileName': typeof FileNameRouteWithChildren
  '/$fileName/breakdown': typeof FileNameBreakdownRoute
  '/$fileName/payments': typeof FileNamePaymentsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$fileName': typeof FileNameRouteWithChildren
  '/$fileName/breakdown': typeof FileNameBreakdownRoute
  '/$fileName/payments': typeof FileNamePaymentsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/$fileName' | '/$fileName/breakdown' | '/$fileName/payments'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/$fileName' | '/$fileName/breakdown' | '/$fileName/payments'
  id:
    | '__root__'
    | '/'
    | '/$fileName'
    | '/$fileName/breakdown'
    | '/$fileName/payments'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FileNameRoute: typeof FileNameRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/$fileName': {
      id: '/$fileName'
      path: '/$fileName'
      fullPath: '/$fileName'
      preLoaderRoute: typeof FileNameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$fileName/payments': {
      id: '/$fileName/payments'
      path: '/payments'
      fullPath: '/$fileName/payments'
      preLoaderRoute: typeof FileNamePaymentsRouteImport
      parentRoute: typeof FileNameRoute
    }
    '/$fileName/breakdown': {
      id: '/$fileName/breakdown'
      path: '/breakdown'
      fullPath: '/$fileName/breakdown'
      preLoaderRoute: typeof FileNameBreakdownRouteImport
      parentRoute: typeof FileNameRoute
    }
  }
}

interface FileNameRouteChildren {
  FileNameBreakdownRoute: typeof FileNameBreakdownRoute
  FileNamePaymentsRoute: typeof FileNamePaymentsRoute
}

const FileNameRouteChildren: FileNameRouteChildren = {
  FileNameBreakdownRoute: FileNameBreakdownRoute,
  FileNamePaymentsRoute: FileNamePaymentsRoute,
}

const FileNameRouteWithChildren = FileNameRoute._addFileChildren(
  FileNameRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FileNameRoute: FileNameRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
